.form.bg-primary.h-100v
	.containe.text-center.d-flex.flex-column.p-0
		.d-flex.w-full.justify-content-between.align-items-center
			div
			.form-logo.to_hide
				 = image_tag "temp-logo.svg"
			= link_to root_path do
				i.form-back.fas.fa-arrow-right.fa-2x.icon-secondary.to_hide

		#render-container = render 'pages/lengths'

		- names = []
		- cookies[:tags].split(",").each do |id|
			- names << ActsAsTaggableOn::Tag.find(id).name
		- ranked = Game.rank_games(Game.tagged_with(names)) if names.present?
		p.text-white#game = ranked.first.name if ranked.present?


/ .form-games.bg-primary-solid.h-12v.form-rounded.text-center.text-white.resizable
/ 	.game-card
/ 		i.fas.fa-grip-lines.fa-2x.grip
/ 		#board.board-min-height.bg-primary-solid
		/ h2.game-name.pt-2#get_game
		/ .flex.justify-content-center.w-100.align-items-center.flex-column
		/ 	.description.game-attrs.w-75.text-right#get_description.d-none
		/ 	.how-to.game-attrs.w-75.text-right#get_how_to.d-none
	/ #board
		/ .card

/ .append
/ #board
/ 	.card
/ #slider.swipe.h-100v
/   .swipe-wrap
/     .h-1.w-1.bg-success
/     .h-1.w-1.bg-danger
/     .h-1.w-1.bg-warning
/ .h-100v
/ 	.draggable Draggable Element
javascript:
	$(document).ready(function() {



		// import Swipe from 'swipejs'
		// const position = { x: 0, y: 0 }
		//
		// interact('.draggable').draggable({
		// 	startAxis: 'y',
	  // 	lockAxis: 'start',
		//   listeners: {
		//     start (event) {
		//       console.log(event.type, event.target)
		//     },
		//     move (event) {
		//       position.x += event.dx
		//       position.y += event.dy
		//
		//       event.target.style.transform =
		//         `translate(${position.x}px, ${position.y}px)`
		//     },
		//   }
		//
		// })bac
		var up
		var up_or_down
		var original_question = $(".question").offset().top
		var original_top = $(".form-games").offset().top
		var original_font_size = $(".form-back").css('font-size')
		var original_logo_position = $(".form-logo").children('img').offset().top

		var element = document.getElementById('slider');
		window.mySwipe = new Swipe(element, {
		  startSlide: 1,
		  auto: false,
		  draggable: true,
		  autoRestart: true,
		  continuous: true,
		  disableScroll: true,
		  stopPropagation: true,
		  callback: function(index, element) {},
		  transitionEnd: function(index, element) {}
		});

		$(function() {
			Cookies.set('tags', ["5 דקות"] );
			// console.log( $('#get_game').html() );
			$.ajax({
			 type: "GET",
			 dataType: "json",
			 data: { tags: Cookies.getJSON('tags') },
			 url: "/filter_tag",
			 success: function(data){
				 // console.log(data);
				 $.each(data.reverse(), function(index, game) {
					 // console.log(index);
					 carousel.push(index, game)
					 // console.log(data);

				 });
				 carousel.handle()
				 $('#get_game').html(data[0].name)
				 $('.game-card').attr('data-next', 1)
				 $('#get_description').html(data[0].description)
				 $('#get_how_to').html(data[0].how_to)

		  }})
		});

		counter = 1
		var panDirection = false
		var topCardId = 0
		class Carousel {
				constructor(element) {

						this.board = element

						// handle gestures
						this.handle()

				}

				handle() {

						// list all cards
						this.cards = this.board.querySelectorAll('.card')

						this.topCard = this.cards[this.cards.length - 1]

						var ids = []
						$.each(this.cards, function( index, el) {
							var id = parseInt(el.id.split("-")[1])
							ids.push(id)
							// console.log(ids);
						});
						if ($(".card").last().attr('id') != undefined) {
							topCardId = $(".card").last().attr('id')
							// var topCardId = .attr('id')
							topCardId = parseInt(topCardId.split("-")[1])
						}else {
							topCardId = 1
						}
						console.log(topCardId);

						$(this.nextCard).removeClass('nextCard')
						$(this.prevCard).removeClass('prevCard')
						if (topCardId == this.cards.length) {
							this.nextCard = this.board.querySelectorAll("#game-1")[0]
						}else {
							this.nextCard = this.board.querySelectorAll("#game-" + parseInt(topCardId + 1))[0]
						}
						if (topCardId == 1) {
							// this.prevCard = this.cards[0]
							this.prevCard = this.board.querySelectorAll("#game-"  + this.cards.length)[0]
						}else {
							this.prevCard = this.board.querySelectorAll("#game-"  + parseInt(topCardId - 1))[0]
						}

						if (this.nextCard != undefined) console.log(this.nextCard.id);
						if (this.prevCard != undefined) console.log("prev: "+this.prevCard.id);

						// if at least one card is present
						if (this.cards.length > 0) {

								// set default top card position and scale
								this.topCard.style.transform =
										'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)'

								// destroy previous Hammer instance, if present
								if (this.hammer) this.hammer.destroy()

								// listen for tap and pan gestures on top card
								this.hammer = new Hammer(this.topCard)
								this.hammer.add(new Hammer.Tap())
								this.hammer.add(new Hammer.Pan({
										position: Hammer.position_ALL,
										threshold: 0
								}))

								// pass events data to custom callbacks
								this.hammer.on('tap', (e) => {
										this.onTap(e)
								})
								this.hammer.on('pan', (e) => {
										this.onPan(e)
								})

						}

				}

				onTap(e) {
						console.log("tap");
						// get finger position on top card
						let propX = (e.center.x - e.target.getBoundingClientRect().left) / e.target.clientWidth

						// get rotation degrees around Y axis (+/- 15) based on finger position
						let rotateY = 15 * (propX < 0.05 ? -1 : 1)

						// enable transform transition
						this.topCard.style.transition = 'transform 100ms ease-out'

						// apply rotation around Y axis
						this.topCard.style.transform =
								'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(' + rotateY + 'deg) scale(1)'

						// wait for transition end
						setTimeout(() => {
								// reset transform properties
								this.topCard.style.transform =
										'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)'
						}, 100)

				}

				onPan(e) {
					if ($(".form-games").height() > 300 ) {


					// console.log("pan");
						if (!this.isPanning) {

								this.isPanning = true

								// remove transition properties
								this.topCard.style.transition = null
								if (this.nextCard) this.nextCard.style.transition = null

								// get top card coordinates in pixels
								let style = window.getComputedStyle(this.topCard)
								let mx = style.transform.match(/^matrix\((.+)\)$/)
								this.startPosX = mx ? parseFloat(mx[1].split(', ')[4]) : 0
								this.startPosY = mx ? parseFloat(mx[1].split(', ')[5]) : 0

								// get top card bounds
								let bounds = this.topCard.getBoundingClientRect()

								// get finger position on top card, top (1) or bottom (-1)
								this.isDraggingFrom =
										(e.center.y - bounds.top) > this.topCard.clientHeight / 2 ? -1 : 1

						}

						// get new coordinates
						let posX = e.deltaX + this.startPosX
						let posY = e.deltaY + this.startPosY

						// get ratio between swiped pixels and the axes
						let propX = e.deltaX / this.board.clientWidth
						let propY = e.deltaY / this.board.clientHeight
						if (e.deltaX > 0) {
							panDirection = "right"
						} else {
							panDirection = "left"
						}
						this.topCard = this.cards[this.cards.length - 1]
						if (topCardId == this.cards.length) {
							this.nextCard = this.board.querySelectorAll("#game-1")[0]
						}else {
							this.nextCard = this.board.querySelectorAll("#game-" + parseInt(topCardId + 1))[0]
						}
						if (topCardId == 1) {
							// this.prevCard = this.cards[0]
							this.prevCard = this.board.querySelectorAll("#game-"  + this.cards.length)[0]
						}else {
							this.prevCard = this.board.querySelectorAll("#game-"  + parseInt(topCardId - 1))[0]
						}
						if (panDirection == "left") {

							$(this.prevCard).insertBefore(this.topCard)
						}else {
							$(this.nextCard).insertBefore(this.topCard)

						}
						// get swipe direction, left (-1) or right (1)
						let dirX = e.deltaX < 0 ? -1 : 1

						// get degrees of rotation, between 0 and +/- 45
						let deg = this.isDraggingFrom * dirX * Math.abs(propX) * 45

						// get scale ratio, between .95 and 1
						let scale = (95 + (5 * Math.abs(propX))) / 100

						// move and rotate top card
						this.topCard.style.transform =
								'translateX(' + posX + 'px) translateY(-50%) rotate(' + deg + 'deg) rotateY(0deg) scale(1)'

						if (e.isFinal) {

							console.log("pan");
								this.isPanning = false

								let successful = false

								// set back transition properties
								this.topCard.style.transition = 'transform 200ms ease-out'
								if (this.nextCard){
									// this.nextCard.style.transition = 'transform 100ms linear'

								} else {
									console.log("fianl");
								}

								// check threshold and movement direction
								if (propX > 0.25 && e.direction == Hammer.DIRECTION_RIGHT) {

										successful = true
										// get right border position
										posX = this.board.clientWidth

								} else if (propX < -0.25 && e.direction == Hammer.DIRECTION_LEFT) {

										successful = true
										// get left border position
										posX = -(this.board.clientWidth + this.topCard.clientWidth)

								} else if (propY < -0.25 && e.direction == Hammer.DIRECTION_UP) {

										successful = true
										// get top border position
										posY = -(this.board.clientHeight + this.topCard.clientHeight)

								}

								if (successful) {
									if (e.deltaX > 0) {
										panDirection = "right"
									} else {
										panDirection = "left"
									}
										// throw card in the chosen direction
										this.topCard.style.transform =
												'translateX(' + posX + 'px) translateY(' + posY + 'px) rotate(' + deg + 'deg)'

										// wait transition end
										setTimeout(() => {
												carousel.pushDiv(this.topCard, panDirection)

												this.handle()
										}, 200)

								} else {

										// reset cards position and size
										this.topCard.style.transform =
												'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)'
										// if (this.nextCard) this.nextCard.style.transform =
										// 		'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(0.95)'

								}

						}

				}
			}

				push(index, game) {
						// console.log("push");
						let card = document.createElement('div')

						card.classList.add('card')
						card.classList.add('bg-primary-solid')
						card.classList.add('no-border')
						card.classList.add('text-dark')
						if (index == 0) card.classList.add('topCard')

						card.innerHTML = "<h2 class='game-name'>"+ game.name + "</h2>"
						card.id = "game-" + (index + 1)
						if (index == 0) topCardId = 1
						this.board.insertBefore(card, this.board.firstChild)

				}

				pushDiv(div, panDirection) {
						// console.log("pushDiv");

						let card = document.createElement('div')
						// console.log("div");
						card.classList.add('text-dark')
						card.classList.add('card')
						card.classList.add('bg-primary-solid')
						card.classList.add('no-border')
						card.innerHTML = div.innerHTML
						card.id = div.id
						if (panDirection == "right") {
							// card.classList.add('prevCard')
							$(this.board).prepend(card)

						}else {
							// console.log(this.cards[0]);
							$(card).insertBefore(this.cards[0])
							// card.classList.add('nextCard')
						}
						div.remove()
						// this.board.insertBefore(card, this.board.firstChild)
						// console.log("div: " +  div.id);
						// console.log(this.board.firstChild != div);
						// if (index != this.cards.length - 1) {
						// 	// $(div).addClass('removed')
						// 	div.remove()
						// 	// div.classList.add('removed')
						// }
						// else {
						// 	$(div).addClass('to_remove')
						// }
				}


		}


				let board = document.querySelector('#board')
				let carousel = new Carousel(board)
				$("body").addClass('overflow-hidden')
				var logo_initial_top = 	parseInt($(".form-logo").children('img').offset().top)
				interact('.resizable')
					.resizable({
						inertia:  {
					      resistance: 10,
					      minSpeed: 200,
					      endSpeed: 100
					    },
						edges: {
							top   : ".grip",
							left  : false,
							bottom: false,
							right : false
						},
					})
					.on('resizemove', event => {
						// console.log($(event.target).height());
						if ($(event.target).height() > $(document).height()/5) {
							$(".game-attrs").removeClass('d-none').css('display', 'inline-block').addClass('transparent');
							var opacity
							if (parseInt($(event.target).height()/$(document).height()*100) >= 70) {
								opacity = 1
							}else {
								opacity = $(event.target).height()/$(document).height()

							}
							$(".game-attrs").css('opacity', opacity);
						}else {
							$(".game-attrs").addClass('d-none')

						}
						let { x, y } = event.target.dataset


						x = parseFloat(x) || 0
						y = parseFloat(y) || 0
						// $("#board").height($(".form-games").height())
						// var old_top = parseInt($(".card").css("top"))
						// console.log($(".card").css("top"));


						// console.log($(".card").css("top"));
						var top = $(event.target).offset().top
						var question = $(".question").offset().top + $(".question").height()
						// console.log("up_or_down: " + up_or_down);
						// console.log("top: " + top);
						var new_top
						if (top < 300) {
							// console.log("top");
							// $(".card").css("top", "%")
							$(".card").css("top", "50%")
						}else {
							$(".card").css("top", "43%")

						}
						if (top > up_or_down) {
							// console.log("down");
							up = false
						}else if (top < up_or_down) {
							up = true

						}
						if ($(".form-games").height() >= window.innerHeight * 0.80) {
								$(".question").addClass('question-up')
							$(".to_hide").hide()
						}else {
							$(".question").removeClass('question-up')
							$(".to_hide").show()

						}
						console.log($(".form-back").css('font-size'));
						// console.log($(".form-logo").children('img').offset().top);
						if (top <= question + 30 && up) {
							$(".question").offset({top: $(".question").offset().top - 1})
							$(".form-logo").children('img').height(($(".form-logo").children('img').height() - 4))
							if ($(".form-logo").children('img').height() <= $(document).height()/15 ) {
								// console.log("tiny");
								$(".form-logo").children('img').offset({top: $(".form-logo").children('img').offset().top - 2})
								$(".form-back").css('font-size', parseInt($(".form-back").css('font-size')) - 2 + 'px')
							}
							// console.log($(".form-logo").children('img').height);
						}else if (up == false) {
							if ($(".question").offset().top == original_question) {
								$(".question").offset({top: $(".question").offset().top + 3})

							}
							if ($(".form-logo").children('img').height() < $(document).height() * 0.10) {
								$(".form-logo").children('img').height(($(".form-logo").children('img').height() + 4))

							}
							if ($(".form-logo").children('img').offset().top < logo_initial_top ) {
								// console.log("tiny");
								$(".form-logo").children('img').offset({top: $(".form-logo").children('img').offset().top + 1})

							}
							if (parseInt($(".form-back").css('font-size')) < 32) {
								console.log("true");
								$(".form-back").css('font-size', parseInt($(".form-back").css('font-size')) + 2 + 'px')

							}

						}
						// console.log(question);
						// if (event.target) {
						// 	console.log();
						// }
						Object.assign(event.target.style, {
							width: `${event.rect.width}px`,
							height: `${event.rect.height}px`,
							transform: `translate(${event.deltaRect.left}px, ${event.deltaRect.top}px)`
						})
						Object.assign(event.target.dataset, { x, y })
						if (parseInt($(event.target).offset().top) % 4 == 0) {
							up_or_down = $(event.target).offset().top
						}
					})

		console.log("log top:");
		console.log(	$(".form-logo").children('img').offset().top);
	});
